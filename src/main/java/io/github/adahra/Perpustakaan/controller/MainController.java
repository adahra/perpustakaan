 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package io.github.adahra.Perpustakaan.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import io.github.adahra.Perpustakaan.model.User;
import io.github.adahra.Perpustakaan.repository.UserRepository;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

/**
 *
 * @author sebangsa
 */
@RestController    // This means that this class is a Controller
@RequestMapping(path = "/user") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired
    private ObjectMapper objectMapper;
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody
    ResponseEntity<Object> addNewUser(@RequestParam String name,
            @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        ObjectNode objectNode = objectMapper.createObjectNode();
        objectNode.put("message", "User is added successsfully");
        return new ResponseEntity<>(objectNode, HttpStatus.OK);
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
    
    @GetMapping(path = "/{id}")
    public @ResponseBody 
    Optional<User> getUsersById(@PathVariable("id") String id) {
        return userRepository.findById(Integer.valueOf(id));
    }
    
    @DeleteMapping(path = "/delete/{id}")
    public @ResponseBody
    ResponseEntity<Object> deleteUserById(@PathVariable("id") String id) {
        userRepository.deleteById(Integer.valueOf(id));
        ObjectNode objectNode = objectMapper.createObjectNode();
        objectNode.put("message", "User is deleted successsfully");
        objectNode.put("status", String.valueOf(HttpStatus.OK));
        return new ResponseEntity<>(objectNode, HttpStatus.OK);
    }
}
